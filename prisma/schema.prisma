// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  fullName       String
  username       String?
  image          String?
  passwordUsers  String?
  bio            String?
  socialConnection SocialConnection?
  role           RoleEnum  @default(MEMBER)

  thread          Thread[]
  replies          Reply[]
  likes            Like[]

  followeds       Follow[]  @relation(name: "followed")
  followers       Follow[]  @relation(name: "follower")

  SuggestionsGiven  Suggestion[]  @relation("SuggestionsGiven")
  SuggestionsReceived Suggestion[] @relation("SuggestionsReceived")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model Thread {
  id        Int      @id @default(autoincrement())
  content   String
  image     String?

  replies   Reply []
  likes   Like[]

  user User @relation(fields: [userId], references: [id])
  userId    Int

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  image     String?
  likes   Like[]

  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  
  thread    Thread @relation(fields: [threadId], references: [id])
  threadId Int

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Like{
  id  Int  @id @default(autoincrement())
  
  user User? @relation(fields: [userId], references: [id])
  userId  Int?

  thread Thread? @relation(fields: [threadId], references: [id])
  threadId  Int?

  reply Reply? @relation(fields: [replyId], references: [id])
  replyId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Follow {
   id            Int     @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  followed      User?    @relation(name: "followed", fields: [followedId], references: [id])
  followedId    Int?

  follower     User?    @relation("follower", fields: [followerId], references: [id])
  followerId  Int? 
}

model Suggestion {
  id          Int    @id @default(autoincrement())
  suggestedBy User   @relation("SuggestionsGiven", fields: [suggestedById], references: [id])
  suggestedById Int
  suggestedTo  User   @relation("SuggestionsReceived", fields: [suggestedToId], references: [id])
  suggestedToId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


enum RoleEnum {
  ADMIN
  MEMBER
}

enum SocialConnection {
  GOOGLE
  GITHUB
  FACEBOOK
}